name: Analyze Logs with AI Agent

on:
  workflow_run:
    workflows: ["python-tests"]  # This refers to the first workflow
    types:
      - completed  # Triggered when the first workflow completes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  analyze_logs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.workflow_run.head_branch }}

    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y

    - name: Install jq
      run: |
        sudo apt-get install jq -y

    - name: Fetch logs from previous workflow run
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Fetching logs from the previous run..."
        # Fetch the ID of the most recent workflow run for the "python-tests" workflow
        run_id=$(gh api "repos/${{ github.repository }}/actions/runs?workflow_id=python-tests&status=completed&per_page=1" \
          | jq -r '.workflow_runs[0].id')
        
        echo "Run ID: $run_id"
        
        # Fetch the logs URL from GitHub API
        logs_url="https://api.github.com/repos/${{ github.repository }}/actions/runs/${run_id}/logs"
        echo "Logs URL: $logs_url"
        
        # Download the logs as a zip file, following redirects
        http_status=$(curl -L -s -o logs.zip -w "%{http_code}" -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" $logs_url)
        
        if [ "$http_status" -ne 200 ]; then
          echo "Failed to fetch logs. HTTP status: $http_status"
          cat logs.zip
          exit 1
        fi
        
        # Unzip the logs file
        unzip logs.zip -d logs || { echo "Failed to unzip logs"; exit 1; }
        
        # Combine all the logs into one file
        cat logs/**/*.txt > logs/combined_logs.txt

    - name: Verify combined logs file and debugging
      run: |
        echo "Verifying combined logs file..."
        ls -l logs/
        echo "Current directory: $(pwd)"
        echo "Checking tools folder:" 
        ls -l tools/

    - name: Process logs and send to AI agent
      run: |
        echo "Sending logs to AI agent for analysis..."
        
        # Debugging: Print current directory and list files
        echo "Current directory before running script: $(pwd)"
        echo "Listing files in tools directory:"
        ls -l "${GITHUB_WORKSPACE}/tools"
        
        # Change directory to tools and run the AI agent script
        cd "${GITHUB_WORKSPACE}/tools"
        python dylan_ai_agent.py "${GITHUB_WORKSPACE}/logs/combined_logs.txt" > ai-analysis-result.txt
        
        # Output the AI analysis results
        echo "AI analysis completed. Results:"
        cat ai-analysis-result.txt